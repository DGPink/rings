
const rndjnk = (num) => num + (Math.random()-0.5) * 20;

const posColors = {
  0: [135,255,220],
  10: [175,245,140],
  20: [215,235,140],
  30: [255,215,140],
  40: [255,195,170],
  50: [255,165,200],
}
const negColors = {
  '-0': [150,250,255],
  '-10': [180,220,255],
  '-20': [190,200,255],
  '-30': [200,180,255],
  '-40': [210,160,255],
  '-50': [220,140,255],
}

const rgbaString = ([r,g,b], a=1) => "rgb(x,y,z,a)".replace(/x/,r).replace(/y/,g).replace(/z/,b).replace(/a/,a);
const intercolor = (colors) => Object.values(colors)
  .map((e,i,r)=> i
    ? Array(10).fill(0)
      .map((a,k)=> e
        .map((f,j)=> f - (9-k)*(f-r[i-1][j])/10))
    : [e]).flat();

const posTempColor = intercolor(posColors);
const negTempColor = intercolor(negColors);
const colors = {};

posTempColor.forEach((e,i)=> colors[i] = e);
negTempColor.forEach((e,i)=> colors["-"+i] = e);
const colorjson = JSON.stringify(colors);

const windblade = rgbaString([215,255,255], 0.75);

// <script type="text/javascript" src="main.js"></script>
const purplerain = rgbaString([185,125,205], 1);
const whiterain = rgbaString([245,255,245], 1);
const purplesnow = rgbaString([255,245,255], 1);
const whitesnow = rgbaString([215,255,255], 1);


const darkmoon = rgbaString([40,60,80], 1);
const litemoon = rgbaString([210,195,210], 1); //rgbaString([195,210,210], 1);
const nearside = litemoon;
const farside = darkmoon;
const lightside = litemoon;

const darkside = rgbaString([10,200,200], 0);  //darkmoon;
const tubes = [[195,210,210], [195,210,210], ];
const mornsun = "pink"; //TODO
const noonsun = "yellow"; //TODO
const evensun = "#f9cb9c"; //TODO
const cloudcolor = rgbaString([245,255,255],1);
const background = rgbaString([10,20,20], 1);

const tubecolor = () => rgbaString([195,210,210].map(e => rndjnk(e)), 1);

const snubecolor = (n, pha, i) => (i < pha || i >= (pha + n/2))
  ? farside
  : (i < n/4 || i > n-n/4)
  ? darkmoon
  : litemoon;

const tubestate = (n, pha, i, tubeclr) => ((i/n + (1-pha))%1 <= 1/2)
  ? (i/n <= 1/2)
    ? farside
    : tubeclr // lightside
    // lightside(1 - Math.abs(i/n - (pha+0.25))) // for intensity, pha shift for to peak intensity
  :darkside;


const pink = "#e6a";
const yellow = "#fa3";
const blue = "#5af";
const green = "#3b3";

// todo we need to change blue, or green, too hard to differntiate
const suitlinecode = {"♥":"#e6a","♦":"#fa3","♣":"#68f","♠":"#3b3","⊚":"#111","⊝":"gray"};
const suitfillcode = {"♥":"#e6a","♦":"#fa3","♣":"#5af","♠":"#3b3","⊚":"white","⊝":"gray"};
const darksuitfillcode = {"♥":"#c48","♦":"#d81","♣":"#38d","♠":"#191","⊚":"#222","⊝":"gray"};
//const suitcode = {"♥":"#e6a","♦":"#fa3","♣":"#3b3","♠":"#5af","⊚":"black","⊝":"gray"};

const pipcode = {"A":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"0":10,"J":11,"Q":12,"K":13,"B":14};
//const pipcode = {"A":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"0":10,"J":11,"Q":12,"K":13,"B":14};



const suitnamecode = {
  "♥":"./img/hearts.svg",
  "♦":"./img/diamonds.svg",
  "♣":"./img/clubs.svg",
  "♠":"./img/spades.svg",
  "⊝":"./img/QuestionMark.svg"
};

//const suitnamecode = {"♥":"./img/hearts.png","♦":"./img/diamonds.png","♣":"./img/clubs.png","♠":"./img/spades.png","⊚":"white","⊝":"gray"};
// ⊝ //CIRCLED DASH Unicode: U+229D, UTF-8: E2 8A 9D
// ⊚ CIRCLED RING OPERATOR Unicode: U+229A, UTF-8: E2 8A 9A;



const vertshortz =[
  [[0,0,0, 0,0,0, 0,1,0, 1,0,0, 0,0,0],[0,0,0, 0,0,0, 0,1,0, 0,0,0, 0,0,0]], //0
  [[0,0,0, 0,0,0, 1,0,1, 0,0,0, 0,0,0],[0,0,0, 0,0,0, 1,0,1, 0,0,0, 0,0,0]], //1
  [[0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0],[0,0,0, 0,0,1, 0,1,0, 1,0,0, 0,0,0]], //2

  [[0,0,0, 0,0,0, 0,1,0, 1,0,0, 0,0,0],[0,0,0, 0,0,0, 0,1,0, 0,0,0, 0,0,0]], //3
  [[0,0,0, 0,1,0, 0,0,0, 0,1,0, 0,0,0],[0,0,0, 0,1,0, 0,0,0, 0,1,0, 0,0,0]], //4
  [[0,1,0, 0,0,0, 0,0,0, 0,1,0, 0,0,0],[0,0,0, 1,0,0, 0,1,0, 0,0,0, 0,1,0]], //5

  [[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0]], //6
  [[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],[0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0]],
  [[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0],[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0]],

  [[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0]], //9
  [[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0],[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0]],
  [[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1]],

  [[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0]], //12
  [[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1]],
  [[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1]],
];


function notesfromthepost(post,ring) {
  return 8 * post.rings.findLastIndex((e) => e.code === ring.code) / post.length;//linewidth
}

const textpips = {
  chinese: [0, '一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二', '十三'],
}



const suitpathcode = {
  "♥":"M447.77,47.074C408.344,47.074 373.161,65.89 350.016,95.34L350,95.336L349.985,95.34C326.84,65.891 291.657,47.074 252.231,47.074C182.524,47.074 126.021,105.84 126.021,178.324C126.021,328.254 284.401,386.464 350.011,512.924C415.616,386.474 574.001,328.264 574.001,178.324C573.997,105.836 517.485,47.074 447.781,47.074L447.77,47.074Z",
  "♦":"M350,47.074L175.3,280.004L350,512.934L524.7,280.004L350,47.074Z",
  "♣":"m444.07 406.57c59.352 0 107.46-48.113 107.46-107.46 0-57.203-44.73-103.84-101.11-107.14 4.4727-11.82 7.0312-24.582 7.0312-37.969 0-59.352-48.113-107.46-107.46-107.46s-107.46 48.113-107.46 107.46c0 13.387 2.5586 26.148 7.0312 37.969-56.375 3.3086-101.11 49.941-101.11 107.14 0 59.352 48.113 107.46 107.46 107.46 37.52 0 70.496-19.266 89.715-48.41-28.496 130.45-112.1 155.32-112.1 155.32h232.92s-83.613-24.875-112.11-155.33c19.215 29.152 52.191 48.422 89.719 48.422z",
  "♠":"m424.46 387.71c53.09 0 96.129-43.039 96.129-96.129 0-109.81-120.63-152.45-170.59-245.06-49.965 92.613-170.59 135.25-170.59 245.06 0 53.09 43.039 96.129 96.129 96.129 27.859 0 52.832-11.953 70.387-30.891-28.219 131.61-112.38 156.66-112.38 156.66h232.92s-84.164-25.055-112.38-156.66c17.555 18.938 42.531 30.891 70.387 30.891z",
  "⊝":"M394.644,279.088C400.727,279.088 406.631,279.36 412.356,279.904C418.081,280.448 423.18,281.376 427.653,282.688C432.126,284 435.734,285.776 438.477,288.016C441.22,290.256 442.592,293.072 442.592,296.464C442.592,298.96 441.936,301.12 440.624,302.944C439.312,304.768 437.523,306.352 435.257,307.696C432.991,309.04 430.337,310.24 427.295,311.296C424.254,312.352 421.063,313.36 417.724,314.32C415.338,315.024 412.953,315.744 410.567,316.48C408.182,317.216 406.035,318.032 404.127,318.928C402.218,319.824 400.668,320.864 399.475,322.048C398.282,323.232 397.686,324.624 397.686,326.224L386.415,326.224C384.745,325.072 383.582,323.904 382.926,322.72C382.27,321.536 381.942,320.336 381.942,319.12C381.942,316.752 382.896,314.752 384.804,313.12C386.713,311.488 388.8,309.904 391.066,308.368C393.332,306.832 395.42,305.168 397.328,303.376C399.236,301.584 400.191,299.28 400.191,296.464C400.191,295.056 399.654,293.84 398.58,292.816C397.507,291.792 396.135,290.944 394.465,290.272C392.796,289.6 390.917,289.104 388.83,288.784C386.743,288.464 384.745,288.304 382.836,288.304C377.946,288.304 374.428,288.576 372.281,289.12C370.134,289.664 368.225,290.256 366.556,290.896C369.06,290.96 371.446,291.68 373.712,293.056C375.978,294.432 377.111,296.144 377.111,298.192C377.111,300.624 375.68,302.672 372.817,304.336C369.955,306 365.959,306.832 360.831,306.832C355.821,306.832 351.975,305.968 349.291,304.24C346.607,302.512 345.265,300.304 345.265,297.616C345.265,295.44 346.19,293.248 348.039,291.04C349.887,288.832 352.809,286.832 356.805,285.04C360.801,283.248 365.9,281.808 372.102,280.72C378.304,279.632 385.818,279.088 394.644,279.088ZM374.249,342.736C374.249,341.392 374.726,340.128 375.68,338.944C376.634,337.76 377.976,336.72 379.705,335.824C381.435,334.928 383.433,334.224 385.699,333.712C387.965,333.2 390.351,332.944 392.855,332.944C395.36,332.944 397.716,333.2 399.922,333.712C402.129,334.224 404.067,334.928 405.737,335.824C407.407,336.72 408.719,337.76 409.673,338.944C410.627,340.128 411.104,341.392 411.104,342.736C411.104,344.08 410.627,345.36 409.673,346.576C408.719,347.792 407.407,348.864 405.737,349.792C404.067,350.72 402.129,351.44 399.922,351.952C397.716,352.464 395.36,352.72 392.855,352.72C390.351,352.72 387.965,352.464 385.699,351.952C383.433,351.44 381.435,350.72 379.705,349.792C377.976,348.864 376.634,347.792 375.68,346.576C374.726,345.36 374.249,344.08 374.249,342.736Z"
}
